# ctrl.yaml
---
- hosts: ctrl
  become: yes
  vars:
    # Pass variables from Vagrant to Ansible
    node_count: "{{ node_count | default(2) }}"
    ctrl_cpus: "{{ ctrl_cpus | default(1) }}"
    ctrl_memory: "{{ ctrl_memory | default(4096) }}"
    node_cpus: "{{ node_cpus | default(2) }}"
    node_memory: "{{ node_memory | default(6144) }}"
  tasks:
    - name: "Print controller configuration"
      debug:
        msg: "Controller node with {{ ctrl_cpus }} CPUs and {{ ctrl_memory }}MB memory, managing {{ node_count }} worker nodes"

# Step 13: Initialize Kubernetes Cluster
    - name: "Check if Kubernetes is already initialized (admin.conf exists)"
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_config

    - name: "Kubernetes already initialized â€” skipping kubeadm init"
      debug:
        msg: "Kubernetes is already initialized; skipping cluster init step"
      when: kubeadm_config.stat.exists

    - name: "Initialize Kubernetes cluster with kubeadm"
      command: >
        kubeadm init
        --apiserver-advertise-address=192.168.56.100
        --node-name=ctrl
        --pod-network-cidr=10.244.0.0/16
      when: not kubeadm_config.stat.exists
      register: kubeadm_result
      become: true

    - name: "Output from kubeadm init"
      debug:
        var: kubeadm_result.stdout_lines
      when: kubeadm_result is defined and not kubeadm_config.stat.exists

# Step 14: Set up kubeconfig for vagrant and host access
    - name: "Ensure .kube directory exists for vagrant user"
      file:
        path: /home/vagrant/.kube
        state: directory
        owner: vagrant
        group: vagrant
        mode: '0755'
      become: true

    - name: "Copy Kubernetes admin.conf to vagrant's kube config"
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/vagrant/.kube/config
        remote_src: yes
        owner: vagrant
        group: vagrant
        mode: '0644'
      become: true

    - name: "Copy admin.conf to shared synced folder (host access)"
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /vagrant/admin.conf
        remote_src: yes
        owner: vagrant
        group: vagrant
        mode: '0644'
      become: true

# Step 15: Install Flannel network plugin
    - name: "Download Flannel CNI manifest"
      get_url:
        url: https://raw.githubusercontent.com/flannel-io/flannel/v0.26.7/Documentation/kube-flannel.yml
        dest: /tmp/kube-flannel.yml

    - name: "Patch Flannel manifest with --iface=eth1"
      replace:
        path: /tmp/kube-flannel.yml
        regexp: 'args:\s*\n\s*- "--ip-masq"'
        replace: |
          args:
            - "--ip-masq"
            - "--iface=eth1"

    - name: "Apply Flannel network plugin to the cluster"
      command: kubectl apply -f /tmp/kube-flannel.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: flannel_result

    - name: "Flannel network deployed"
      debug:
        var: flannel_result.stdout_lines
      when: flannel_result is defined
